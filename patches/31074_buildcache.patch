diff --git a/lib/spack/spack/binary_distribution.py b/lib/spack/spack/binary_distribution.py
index a0b0e75b83..8856f1c41f 100644
--- a/lib/spack/spack/binary_distribution.py
+++ b/lib/spack/spack/binary_distribution.py
@@ -41,6 +41,7 @@
 import spack.util.url as url_util
 import spack.util.web as web_util
 from spack.caches import misc_cache_location
+from spack.relocate import utf8_path_to_binary_regex
 from spack.spec import Spec
 from spack.stage import Stage
 
@@ -613,6 +614,15 @@ def read_buildinfo_file(prefix):
     return buildinfo
 
 
+def file_matches_any_binary_regex(path, regexes):
+    with open(path, "rb") as f:
+        contents = f.read()
+    for regex in regexes:
+        if regex.search(contents):
+            return True
+    return False
+
+
 def get_buildfile_manifest(spec):
     """
     Return a data structure with information about a build, including
@@ -628,6 +638,11 @@ def get_buildfile_manifest(spec):
 
     blacklist = (".spack", "man")
 
+    prefixes = [d.prefix for d in spec.traverse(root=True, deptype="all") if not d.external]
+    prefixes.append(spack.hooks.sbang.sbang_install_path())
+    prefixes.append(str(spack.store.layout.root))
+    compiled_prefixes = [utf8_path_to_binary_regex(prefix) for prefix in prefixes]
+
     # Do this at during tarball creation to save time when tarball unpacked.
     # Used by make_package_relative to determine binaries to change.
     for root, dirs, files in os.walk(spec.prefix, topdown=True):
@@ -666,9 +681,9 @@ def get_buildfile_manifest(spec):
                     data['binary_to_relocate_fullpath'].append(path_name)
                     added = True
 
-            if relocate.needs_text_relocation(m_type, m_subtype):
-                data['text_to_relocate'].append(rel_path_name)
-                added = True
+            if relocate.needs_text_relocation(m_type, m_subtype) and file_matches_any_binary_regex(abs_path, compiled_prefixes):
+                data["text_to_relocate"].append(rel_path_name)
+                continue
 
             if not added:
                 data['other'].append(path_name)
diff --git a/lib/spack/spack/relocate.py b/lib/spack/spack/relocate.py
index bbb5e8025a..d55940b4e4 100644
--- a/lib/spack/spack/relocate.py
+++ b/lib/spack/spack/relocate.py
@@ -776,6 +776,14 @@ def relocate_links(links, orig_layout_root,
             tty.warn(msg.format(link_target, abs_link, new_install_prefix))
 
 
+def utf8_path_to_binary_regex(prefix):
+    """Create a (binary) regex that matches the input path in utf8"""
+    prefix_bytes = re.escape(prefix).encode("utf-8")
+    prefix_rexp = re.compile(b"(?<![\\w\\-_/])([\\w\\-_]*?)%s([\\w\\-_/]*)" % prefix_bytes)
+
+    return prefix_rexp
+
+
 def relocate_text(files, prefixes, concurrency=32):
     """Relocate text file from the original installation prefix to the
      new prefix.
@@ -797,9 +805,8 @@ def relocate_text(files, prefixes, concurrency=32):
     for orig_prefix, new_prefix in prefixes.items():
         if orig_prefix != new_prefix:
             orig_bytes = orig_prefix.encode('utf-8')
-            orig_prefix_rexp = re.compile(
-                b'(?<![\\w\\-_/])([\\w\\-_]*?)%s([\\w\\-_/]*)' % orig_bytes)
-            new_bytes = b'\\1%s\\2' % new_prefix.encode('utf-8')
+            orig_prefix_rexp = utf8_path_to_binary_regex(orig_prefix)
+            new_bytes = b"\\1%s\\2" % new_prefix.replace("\\", r"\\").encode("utf-8")
             compiled_prefixes[orig_prefix_rexp] = new_bytes
 
     # Do relocations on text that refers to the install tree
